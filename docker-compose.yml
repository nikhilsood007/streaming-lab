
services:
  # MediaMTX - RTMP Server with Prometheus metrics
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    ports:
      - "1935:1935"    # RTMP
      - "8554:8554"    # RTSP
      - "8888:8888"    # HLS
      - "8889:8889"    # WebRTC
      - "9998:9998"    # Metrics endpoint
    volumes:
      - ./config/mediamtx.yml:/mediamtx.yml:ro
    restart: unless-stopped
    profiles:
      - default
      - mediamtx

  # SRS - Alternative streaming server (profile: srs)
  srs:
    image: ossrs/srs:5
    container_name: srs
    ports:
      - "1935:1935"    # RTMP
      - "8080:8080"    # HTTP
      - "1985:1985"    # HTTP API
      - "9972:9972"    # Prometheus metrics
    volumes:
      - ./config/srs.conf:/usr/local/srs/conf/srs.conf:ro
    restart: unless-stopped
    profiles:
      - srs

  # Node-RED - Scheduling and automation
  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    ports:
      - "1880:1880"
    volumes:
      - ./config/nodered:/data:rw
      - ./scripts:/scripts:ro
      - ./media:/media:ro
    environment:
      - TZ=Europe/London
    restart: unless-stopped

  # Datadog Agent
  datadog:
    image: gcr.io/datadoghq/agent:latest
    container_name: dd-agent
    environment:
      - DD_API_KEY=${DD_API_KEY}  # Use environment variable for API key
      - DD_SITE=datadoghq.eu
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_APM_ENABLED=true
      - DD_TAGS=env:local,project:streaming-lab
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - ./logs:/logs:ro
    restart: unless-stopped

  # COMMENTED OUT - Prometheus - Metrics collection
  # Uncomment if you need custom metrics collection later
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - ./config/alerts.yml:/etc/prometheus/alerts.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #     - '--web.enable-admin-api'
  #   restart: unless-stopped

  # COMMENTED OUT - Grafana - Visualization and dashboards
  # Uncomment if you want local dashboards alongside Datadog
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
  #     - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: streaming_lab
    external: true
